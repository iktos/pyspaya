
name: lint - test

on: pull_request

jobs:
  lint-test:
    runs-on: ubuntu-latest
    environment: development
    strategy:
      matrix:
        python_version: ["3.7", "3.8", "3.9"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python_version}}
      # install & configure poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # install dependencies if cache does not exist
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project
        run: poetry install --no-interaction

      # Run pipeline
      - name: Black
        run: poetry run task check-black
      - name: Linter
        run: poetry run task linter
      - name: Mypy
        run: poetry run task mypy
      - name: Run tests
        run: |
          poetry run task test
          poetry run coverage report


  pages:
    needs: lint-test-publish
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: $
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.7"

      # install & configure poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # load cached venv if cache exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # install dependencies if cache does not exist
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with docs
      - name: Install project
        run: poetry install --no-interaction

      # Generate
      - name: Generate doc
        run: poetry run task docs

      # Publish
      - name: Setup Pages
        uses: actions/configure-pages@v2

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./public

      - id: deployment
        name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v1
